name: Build Android Signed APK & AAB
permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      buildType:
        description: "Choose build type"
        required: true
        default: "apk"
        type: choice
        options:
          - apk
          - aab
          - both
  workflow_run:
    workflows: [ "Automatic Version Bump" ]
    types:
      - completed

jobs:
  build-android:
    if: github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    runs-on: self-hosted #ubuntu-latest

    defaults:
      run:
        working-directory: goprUavOpsManager

    env:
      VARS_CONTEXT: ${{ toJson(vars) }}
      BUILD_TYPE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.buildType || 'both' }}
      EXPO_PUBLIC_GIT_COMMIT_HASH: ${{ github.sha }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
          cache-dependency-path: goprUavOpsManager/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Set env vars from vars context JSON
        run: |
          echo "$VARS_CONTEXT" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
        shell: bash

      - name: Export Android SDK paths (self-hosted only)
        if: runner.environment == 'self-hosted'
        run: |
          echo "ANDROID_HOME=$HOME/Android" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$HOME/Android" >> $GITHUB_ENV
          echo "$HOME/Android/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/Android/platform-tools" >> $GITHUB_PATH

      - name: Restore google-services.json
        run: |
          echo "$GOOGLE_SERVICES_JSON" | base64 --decode > google-services.json
        shell: bash
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}

      - name: Prebuild
        run: npx expo prebuild --platform android
        env:
          EXPO_PUBLIC_FIREBASE_API_KEY: ${{ secrets.EXPO_PUBLIC_FIREBASE_API_KEY }}

      - name: Patch Gradle for release signing
        run: |
          FILE=android/app/build.gradle
          echo "ðŸ”§ Checking $FILE for release signing config..."
          if ! grep -q "signingConfigs.release" "$FILE"; then
            echo "Adding release signing config..."
            sed -i '/signingConfigs {/a \
                    release {\n\
                        storeFile file(project.findProperty("MYAPP_UPLOAD_STORE_FILE"))\n\
                        storePassword project.findProperty("MYAPP_UPLOAD_STORE_PASSWORD")\n\
                        keyAlias project.findProperty("MYAPP_UPLOAD_KEY_ALIAS")\n\
                        keyPassword project.findProperty("MYAPP_UPLOAD_KEY_PASSWORD")\n\
                    }' $FILE
            sed -i 's/signingConfig signingConfigs.debug/signingConfig signingConfigs.release/' $FILE
          else
            echo "âœ… Release signing config already present."
          fi
        shell: bash

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/*.gradle*', 'android/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Decode Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/my-release-key.keystore
        shell: bash

      - name: Verify keystore
        run: |
          ls -lh android/app/*.keystore
          keytool -list -v -keystore android/app/my-release-key.keystore -storepass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }} || true
        shell: bash

      - name: Build Release APK
        if: env.BUILD_TYPE == 'apk' || env.BUILD_TYPE == 'both'
        run: |
          cd android
          ./gradlew assembleRelease \
            -PMYAPP_UPLOAD_STORE_FILE=my-release-key.keystore \
            -PMYAPP_UPLOAD_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }} \
            -PMYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }} \
            -PMYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}
        env:
          EXPO_PUBLIC_FIREBASE_API_KEY: ${{ secrets.EXPO_PUBLIC_FIREBASE_API_KEY }}
        shell: bash

      - name: Build Release AAB
        if: env.BUILD_TYPE == 'aab' || env.BUILD_TYPE == 'both'
        run: |
          cd android
          ./gradlew bundleRelease \
            -PMYAPP_UPLOAD_STORE_FILE=my-release-key.keystore \
            -PMYAPP_UPLOAD_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }} \
            -PMYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }} \
            -PMYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}
        env:
          EXPO_PUBLIC_FIREBASE_API_KEY: ${{ secrets.EXPO_PUBLIC_FIREBASE_API_KEY }}
        shell: bash

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-build-apk
          path: |
            goprUavOpsManager/android/app/build/outputs/apk/release/*.apk
          if-no-files-found: ignore

      - name: Upload AAB
        uses: actions/upload-artifact@v4
        with:
          name: android-build-aab
          path: |
            goprUavOpsManager/android/app/build/outputs/bundle/release/*.aab
          if-no-files-found: ignore
