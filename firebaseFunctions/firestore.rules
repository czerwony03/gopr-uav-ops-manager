rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =========================
    // USERS COLLECTION
    // =========================
    match /users/{userId} {
      // Only authenticated users can read their own profile
      allow read: if isSignedIn() && request.auth.uid == userId;

      // Admins and managers can read any user profile
      allow read: if isAdmin() || isManager();

      // Users can update their own profile (except role)
      allow update: if isSignedIn() && request.auth.uid == userId
      	&& !('role' in request.resource.data.diff(resource.data).affectedKeys());

      // Admins can update any user, including role
      allow update: if isAdmin();

      // Managers can update any user, but not the role field
      allow update: if isManager()
      	&& !('role' in request.resource.data.diff(resource.data).affectedKeys());

      // Allow the first-time creation of a user document by the user themselves
      allow create: if isSignedIn() && request.auth.uid == userId
        && request.resource.data.keys().hasOnly(['email', 'role']);

      // Only admins can create/delete users (user creation generally via Auth, not Firestore)
      allow create, delete: if isAdmin();
    }

    // =========================
    // DRONES COLLECTION
    // =========================
    match /drones/{droneId} {
      // Anyone signed in can read non-deleted drones, admins can read all
      allow read: if (isSignedIn() && !resource.data.isDeleted) || isAdmin();

  	  // Managers/Admins can update anything except restoring
  	  allow update: if (isManager() || isAdmin()) && !isRestoring(resource, request);

      // Only admins can restore a deleted drone
      allow update: if isAdmin() && isRestoring(resource, request);

  	  // Managers/Admins can create or soft-delete
  	  allow create, delete: if isManager() || isAdmin();
    }

    // =========================
    // FLIGHTS COLLECTION
    // =========================
    match /flights/{flightId} {
      // Flight owner, manager or admin can read
      allow read: if isAdmin() || isManager() || resource.data.userId == request.auth.uid;

      // Owner can update their own flights (except userId/userEmail fields)
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid
      	&& !('userId' in request.resource.data.diff(resource.data).affectedKeys())
        && !('userEmail' in request.resource.data.diff(resource.data).affectedKeys());

      // Admins and managers can update any flight
      allow update: if isAdmin() || isManager();

      // Anyone signed in can create a flight for themselves
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      // Only admins/managers can delete
      allow delete: if isAdmin() || isManager();
    }

    // =========================
    // PROCEDURES/CHECKLISTS COLLECTION
    // =========================
    match /procedures_checklists/{procedureId} {
      // Anyone signed in can read non-deleted procedures
      allow read: if isSignedIn() && !resource.data.isDeleted;

      // Admins can read all procedures
      allow read: if isAdmin();

      // Managers/Admins can create
      allow create: if isManager() || isAdmin();

      // Managers/Admins can update *except restoring*
      allow update: if (isManager() || isAdmin()) && !isRestoring(resource, request);

	  // Only admins can restore
	  allow update: if isAdmin() && isRestoring(resource, request);

      // Managers/Admins can soft-delete
	  allow delete: if isManager() || isAdmin();
    }

    // =========================
    // CATEGORIES COLLECTION
    // =========================
    match /categories/{categoryId} {
      // Anyone signed in can read non-deleted procedures
      allow read: if isSignedIn() && !resource.data.isDeleted;

      // Admins can read all procedures
      allow read: if isAdmin();

      // Managers/Admins can create
      allow create: if isManager() || isAdmin();

      // Managers/Admins can update *except restoring*
      allow update: if (isManager() || isAdmin()) && !isRestoring(resource, request);

      // Only admins can restore
      allow update: if isAdmin() && isRestoring(resource, request);

      // Managers/Admins can soft-delete
      allow delete: if isManager() || isAdmin();
    }

    // =========================
    // AUDIT LOGS COLLECTION
    // =========================
    match /auditLogs/{logId} {
      // Only admins can read audit logs
      allow read: if isAdmin();

      // Anyone signed in can write audit logs (for their own actions)
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;

      // Prevent updates/deletes from clients
      allow update, delete: if false;
    }

    // =========================
    // DRONE COMMENTS COLLECTION
    // =========================
    match /droneComments/{commentId} {
      // Read access based on user role and comment visibility:
      // - Regular users: can read public, non-deleted comments
      // - Managers/Admins: can read all non-deleted comments (public and hidden)
      // - Admins: can read all comments including deleted ones
      allow read: if isSignedIn() && resource.data.visibility == 'public' && !resource.data.isDeleted;
      allow read: if isSignedIn() && resource.data.visibility == 'hidden' && !resource.data.isDeleted && resource.data.userId == request.auth.uid;
      allow read: if isManager() && !resource.data.isDeleted;
      allow read: if isAdmin();
      
      // All authenticated users can create comments
      allow create: if isSignedIn();
      
      // Users can update their own comments, admins/managers can update any comment
      allow update: if isSignedIn() && (
        resource.data.userId == request.auth.uid || 
        (isManager() || isAdmin())
      );
      
      // Only managers and admins can soft-delete comments
      allow delete: if isManager() || isAdmin();
    }

    // =========================
    // APP SETTINGS COLLECTION
    // =========================
    match /appsettings/{settingId} {
      // Anyone signed in can read app settings (for cache synchronization)
      allow read: if isSignedIn();

      // Only managers/admins can write app settings (timestamp updates)
      allow write: if isManager() || isAdmin();
    }

    // =========================
    // PUBLIC USERS COLLECTION
    // =========================
    match /publicUsers/{userId} {
      // All authenticated users can read public user info (firstname, surname only)
      allow read: if isSignedIn();
      
      // Only Firebase functions can write to this collection
      allow write: if false;
    }

    // =========================
    // HELPERS
    // =========================
    function isSignedIn() {
      return request.auth != null;
    }
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    function isManager() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager';
    }
    function isRestoring(resource, request) {
      // Checks if isDeleted is changing from true to false
      return resource.data.isDeleted == true && request.resource.data.isDeleted == false;
    }
  }
}
