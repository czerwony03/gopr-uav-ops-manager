rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    match /drones/images/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.role in ['manager', 'admin'];
    }

    match /drones/equipment/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.role in ['manager', 'admin'];
    }

    match /procedures_checklists/images/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.role in ['manager', 'admin'];
    }

    // Drone comment images - any authenticated user can upload, but only to their own comment
    match /droneComments/images/{commentId}/{fileName} {
      allow read: if request.auth != null;
      
      // Allow authenticated users to upload images to new comments
      // They can only create new files, not overwrite existing ones
      allow write: if request.auth != null && 
        resource == null; // Only allow creating new files
        
      // Allow managers/admins to delete any comment images
      // Allow comment owners to delete their own comment images
      allow delete: if request.auth != null && (
        request.auth.token.role in ['manager', 'admin'] ||
        // Check if the user owns the comment (requires Firestore lookup)
        exists(/databases/(default)/documents/droneComments/$(commentId)) &&
        get(/databases/(default)/documents/droneComments/$(commentId)).data.userId == request.auth.uid
      );
    }

    match /{allOtherPaths=**} {
      allow read, write: if false;
    }
  }
}
